'use strict';

(function() {
  function toArray(arr) {
    return Array.prototype.slice.call(arr);
  }

  function promisifyRequest(request) {
    return new Promise(function(resolve, reject) {
      request.onsuccess = function() {
        resolve(request.result);
      };

      request.onerror = function() {
        reject(request.error);
      };
    });
  }

  function promisifyRequestCall(obj, method, args) {
    var request;
    var p = new Promise(function(resolve, reject) {
      request = obj[method].apply(obj, args);
      promisifyRequest(request).then(resolve, reject);
    });

    p.request = request;
    return p;
  }

  function promisifyCursorRequestCall(obj, method, args) {
    var p = promisifyRequestCall(obj, method, args);
    return p.then(function(value) {
      if (!value) return;
      return new Cursor(value, p.request);
    });
  }

  function proxyProperties(ProxyClass, targetProp, properties) {
    properties.forEach(function(prop) {
      Object.defineProperty(ProxyClass.prototype, prop, {
        get: function() {
          return this[targetProp][prop];
        },
        set: function(val) {
          this[targetProp][prop] = val;
        }
      });
    });
  }

  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {
    properties.forEach(function(prop) {
      if (!(prop in Constructor.prototype)) return;
      ProxyClass.prototype[prop] = function() {
        return promisifyRequestCall(this[targetProp], prop, arguments);
      };
    });
  }

  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {
    properties.forEach(function(prop) {
      if (!(prop in Constructor.prototype)) return;
      ProxyClass.prototype[prop] = function() {
        return this[targetProp][prop].apply(this[targetProp], arguments);
      };
    });
  }

  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {
    properties.forEach(function(prop) {
      if (!(prop in Constructor.prototype)) return;
      ProxyClass.prototype[prop] = function() {
        return promisifyCursorRequestCall(this[targetProp], prop, arguments);
      };
    });
  }

  function Index(index) {
    this._index = index;
  }

  proxyProperties(Index, '_index', [
    'name',
    'keyPath',
    'multiEntry',
    'unique'
  ]);

  proxyRequestMethods(Index, '_index', IDBIndex, [
    'get',
    'getKey',
    'getAll',
    'getAllKeys',
    'count'
  ]);

  proxyCursorRequestMethods(Index, '_index', IDBIndex, [
    'openCursor',
    'openKeyCursor'
  ]);

  function Cursor(cursor, request) {
    this._cursor = cursor;
    this._request = request;
  }

  proxyProperties(Cursor, '_cursor', [
    'direction',
    'key',
    'primaryKey',
    'value'
  ]);

  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [
    'update',
    'delete'
  ]);

  // proxy 'next' methods
  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {
    if (!(methodName in IDBCursor.prototype)) return;
    Cursor.prototype[methodName] = function() {
      var cursor = this;
      var args = arguments;
      return Promise.resolve().then(function() {
        cursor._cursor[methodName].apply(cursor._cursor, args);
        return promisifyRequest(cursor._request).then(function(value) {
          if (!value) return;
          return new Cursor(value, cursor._request);
        });
      });
    };
  });

  function ObjectStore(store) {
    this._store = store;
  }

  ObjectStore.prototype.createIndex = function() {
    return new Index(this._store.createIndex.apply(this._store, arguments));
  };

  ObjectStore.prototype.index = function() {
    return new Index(this._store.index.apply(this._store, arguments));
  };

  proxyProperties(ObjectStore, '_store', [
    'name',
    'keyPath',
    'indexNames',
    'autoIncrement'
  ]);

  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [
    'put',
    'add',
    'delete',
    'clear',
    'get',
    'getAll',
    'getKey',
    'getAllKeys',
    'count'
  ]);

  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [
    'openCursor',
    'openKeyCursor'
  ]);

  proxyMethods(ObjectStore, '_store', IDBObjectStore, [
    'deleteIndex'
  ]);

  function Transaction(idbTransaction) {
    this._tx = idbTransaction;
    this.complete = new Promise(function(resolve, reject) {
      idbTransaction.oncomplete = function() {
        resolve();
      };
      idbTransaction.onerror = function() {
        reject(idbTransaction.error);
      };
      idbTransaction.onabort = function() {
        reject(idbTransaction.error);
      };
    });
  }

  Transaction.prototype.objectStore = function() {
    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));
  };

  proxyProperties(Transaction, '_tx', [
    'objectStoreNames',
    'mode'
  ]);

  proxyMethods(Transaction, '_tx', IDBTransaction, [
    'abort'
  ]);

  function UpgradeDB(db, oldVersion, transaction) {
    this._db = db;
    this.oldVersion = oldVersion;
    this.transaction = new Transaction(transaction);
  }

  UpgradeDB.prototype.createObjectStore = function() {
    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));
  };

  proxyProperties(UpgradeDB, '_db', [
    'name',
    'version',
    'objectStoreNames'
  ]);

  proxyMethods(UpgradeDB, '_db', IDBDatabase, [
    'deleteObjectStore',
    'close'
  ]);

  function DB(db) {
    this._db = db;
  }

  DB.prototype.transaction = function() {
    return new Transaction(this._db.transaction.apply(this._db, arguments));
  };

  proxyProperties(DB, '_db', [
    'name',
    'version',
    'objectStoreNames'
  ]);

  proxyMethods(DB, '_db', IDBDatabase, [
    'close'
  ]);

  // Add cursor iterators
  // TODO: remove this once browsers do the right thing with promises
  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {
    [ObjectStore, Index].forEach(function(Constructor) {
      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {
        var args = toArray(arguments);
        var callback = args[args.length - 1];
        var nativeObject = this._store || this._index;
        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));
        request.onsuccess = function() {
          callback(request.result);
        };
      };
    });
  });

  // polyfill getAll
  [Index, ObjectStore].forEach(function(Constructor) {
    if (Constructor.prototype.getAll) return;
    Constructor.prototype.getAll = function(query, count) {
      var instance = this;
      var items = [];

      return new Promise(function(resolve) {
        instance.iterateCursor(query, function(cursor) {
          if (!cursor) {
            resolve(items);
            return;
          }
          items.push(cursor.value);

          if (count !== undefined && items.length == count) {
            resolve(items);
            return;
          }
          cursor.continue();
        });
      });
    };
  });

  var exp = {
    open: function(name, version, upgradeCallback) {
      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);
      var request = p.request;

      request.onupgradeneeded = function(event) {
        if (upgradeCallback) {
          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));
        }
      };

      return p.then(function(db) {
        return new DB(db);
      });
    },
    delete: function(name) {
      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);
    }
  };

  if (typeof module !== 'undefined') {
    module.exports = exp;
    module.exports.default = module.exports;
  }
  else {
    self.idb = exp;
  }
}());

/**
 * Setup IDB for restaurants JSON storage
 * @type {*|Promise<Cache>|void|IDBOpenDBRequest|Window|Document}
 */
let dbPromise = idb.open('restaurant-reviews', 1, function (db) {
    if (!db.objectStoreNames.contains('restaurants-store')) {
        db.createObjectStore('restaurants-store', {keyPath: 'id'});
    }
    if (!db.objectStoreNames.contains('reviews-store')) {
        let reviewStore = db.createObjectStore('reviews-store', {keyPath: 'id'});
        reviewStore.createIndex('restaurant', 'restaurant_id');
    }
    if (!db.objectStoreNames.contains('reviews-sync-store')) {
        db.createObjectStore('reviews-sync-store', {keyPath: 'createdAt'});
    }
});

/**
 * Add data to restaurants store in IDB
 * @param data
 * @param objectStore
 * @returns {Promise}
 */
function iDBAddData(data, objectStore) {
    return dbPromise.then(function (db) {
        if (!db) return;
        const tx = db.transaction(objectStore, 'readwrite');
        const store = tx.objectStore(objectStore);
        if (Array.isArray(data)) {
            data.forEach(function (restaurant) {
                store.put(restaurant);
                return tx.complete;
            });
        } else {
            store.put(data);
            return tx.complete;
        }

    });
}

/**
 * Fetch all data from restaurants store in IDB
 * @returns {Promise}
 */
function iDBFetchData(objectStore) {
    return dbPromise.then(function (db) {
        if (!db) return;
        const tx = db.transaction(objectStore, 'readonly');
        const store = tx.objectStore(objectStore);
        return store.getAll();
    });
}

/**
 * Fetch all data for restaurant by id in IDB store
 * @returns {Promise}
 */
function iDBFetchReviewsByID(restaurantID) {
    return dbPromise.then(function (db) {

        if (!db) return;
        const tx = db.transaction('reviews-store', 'readonly');
        const store = tx.objectStore('reviews-store');

        const dbIndex = store.index('restaurant');

        return dbIndex.getAll(parseInt(restaurantID));

    });
}

/**
 * Remove all data from restaurants store in IDB
 * @returns {Promise}
 */
function iDBClearAllData(objectStore) {
    return dbPromise
        .then(function (db) {
            const tx = db.transaction(objectStore, 'readwrite');
            const store = tx.objectStore(objectStore);
            store.clear();
            return tx.complete;
        });
}

function iDBDeleteItem(objectStore, id) {
    dbPromise
        .then((db) => {
            const tx = db.transaction(objectStore, 'readwrite');
            const store = tx.objectStore(objectStore);
            store.delete(id);
            return tx.complete;
        });

}

/**
 * Use an IntersectionObserver to lazyload Google Map.
 */
function lazyLoadMap() {
    const map = document.querySelector('#map');
    const mapScriptTag = document.createElement('script');
    mapScriptTag.src = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyAn0CqkAymgcb7syjdi0ke0GPu_OFPTKVk&libraries=places&callback=initMap';
    if (!('IntersectionObserver' in window)) {
        document.body.appendChild(mapScriptTag);
        return;

    }
    const config = {
        root: null,
        rootMargin: '0px 0px 0px 0px',
        threshold: 0.1
    };


    let mapObserver = new IntersectionObserver(function (entries, self) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                console.log(entry.isIntersecting);
                document.body.appendChild(mapScriptTag);
                self.unobserve(entry.target);
            }
        });
    }, config);

    mapObserver.observe(map);
}

/**
 * Use an IntersectionObserver to lazyload images.
 */
function lazyLoadImages() {
    const pictures = document.querySelectorAll('picture');
    if (!('IntersectionObserver' in window)) {
        pictures.forEach(picture => {
            loadImage(picture);
        });
        return;

    }
    const config = {
        rootMargin: '-200px 0px 0px 0px',
        threshold: 0.5
    };

    let observer = new IntersectionObserver(function (entries, self) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                loadImage(entry.target);
                self.unobserve(entry.target);
            }
        });
    }, config);

    pictures.forEach(picture => {
        observer.observe(picture);
    });
}

/**
 * Update picture element src and srcset
 * @param picture
 */
function loadImage(picture) {

    const webpSrcSet = picture.children[0].getAttribute('data-webp-srcset');
    const jpegSrcSet = picture.children[1].getAttribute('data-jpeg-srcset');
    const imgSrc = picture.children[2].getAttribute('data-img-src');
    if (!imgSrc) {
        return;
    }
    picture.children[0].srcset = webpSrcSet;
    picture.children[1].srcset = jpegSrcSet;
    picture.children[2].src = imgSrc;
}

/**
 * onClick handler for restaurants favorites feature.
 * @param e
 */
function favouriteRestaurant(e) {
    if (e.target.classList.contains('favorite')) {
        if (e.type === 'keydown' && e.keyCode !== 13) {
            return;
        }
        const restaurantID = e.target.parentElement.dataset.id;
        if (e.target.classList.contains('favorited')) {
            fetch(`http://localhost:1337/restaurants/${restaurantID}/?is_favorite=false`, {
                method: 'POST'
            })
                .then((res) => {
                    e.target.classList.remove('favorited');
                    e.target.title = `Add to Favourites`;
                })
                .catch((e) => alert('Can not connect to server. Please try later.'));
        } else {
            fetch(`http://localhost:1337/restaurants/${restaurantID}/?is_favorite=true`, {
                method: 'POST'
            })
                .then((res) => {
                    e.target.classList.add('favorited');
                    e.target.title = `Remove from Favourites`;
                })
                .catch((e) => alert('Can not connect to server. Please try later.'));
        }
    }
}

